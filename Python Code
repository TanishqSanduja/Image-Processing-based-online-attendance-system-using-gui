
#Image processing based online attendance using gui

#[1] import the necessary packages and libraries########################################################################
import tkinter
import cv2
import PIL.Image, PIL.ImageTk
#import time
from skimage import measure
import matplotlib.pyplot as plt
import numpy as np
from Tkinter import * 

#[2]Get the Image of the student from the database to check similarity index##################################
global original,text

def printtext():
    global e
    string = e.get() 
    #print string 
    original = cv2.imread("C:/Users/lenovo pc/Desktop/database/"+string+".jpg")#getting image from the database
    text=string

root = Tk()

root.title('Enter your Name')

e = Entry(root)
e.pack()
e.focus_set()

b = Button(root,text='okay',command=printtext)
b.pack(side='bottom')
root.mainloop()

#[3] defining Mean_Squared_Error and Structural_Similarity_Measure functions################################################
def mse(imageA, imageB):
	# the 'Mean Squared Error' between the two images is the
	# sum of the squared difference between the two images;
	# NOTE: the two images must have the same dimension
	err = np.sum((imageA.astype("float") - imageB.astype("float")) ** 2)
	err /= float(imageA.shape[0] * imageA.shape[1])
	
	# return the MSE, the lower the error, the more "similar"
	# the two images are
	return err

def compare_images(imageA, imageB, title):
	# compute the mean squared error and structural similarity
	# index for the images
	m = mse(imageA, imageB)
	s = measure.compare_ssim(imageA, imageB)
	# setup the figure
	fig = plt.figure(title)
	plt.suptitle("MSE: %.2f, SSIM: %.2f" % (m, s))
	# show first image
	ax = fig.add_subplot(1, 2, 1)
	plt.imshow(imageA, cmap = plt.cm.gray)
	plt.axis("off")
	# show the second image
	ax = fig.add_subplot(1, 2, 2)
	plt.imshow(imageB, cmap = plt.cm.gray)
	plt.axis("off")
	# show the images
	plt.show()
    
	if s < 0.30 :#to check structural similarity(low structural similarity) and registering a new student
		cv2.imwrite(filename = text+'.jpg',image=imageB)
		print("New Student Registered!")
		img_new = cv2.imshow("Image of New Student", new_image.jpg)
		cv2.waitKey(10)
		cv2.destroyAllWindows()
		
            
	else:#to check structural similarity(high structural similarity) and mark attendance of the student
		print("Student verified!")
		print("Good Morning Student!!")
		#webcam.release()
		cv2.destroyAllWindows()
		

#[4]defining classes for Video-Capture and Image Processing using GUI########################################################################
class App:
    def __init__(self, window, window_title, video_source=0):
        self.window = window
        self.window.title(window_title)
        self.video_source = video_source

        # open video source (by default this will try to open the computer webcam)
        self.vid = MyVideoCapture(self.video_source)
        # Create a canvas that can fit the above video source size
        self.canvas = tkinter.Canvas(window, width = self.vid.width, height = self.vid.height)
        self.canvas.pack()

        # Button that lets the user take a snapshot
        self.btn_snapshot=tkinter.Button(window, text="Snapshot", width=50, command=self.snapshot)
        self.btn_snapshot.pack(anchor=tkinter.CENTER, expand=True)

        # After it is called once, the update method will be automatically called every delay milliseconds
        self.delay = 15
        self.update()

        self.window.mainloop()

    def snapshot(self):
        # Get a frame from the video source
        ret, frame = self.vid.get_frame()

        if ret:
            #original = cv2.imread("C:/Users/lenovo pc/Desktop/database/BG2M.jpg")#getting image from the database
            #webcam.release()
            # convert the images to grayscale
            original = cv2.cvtColor(original, cv2.COLOR_BGR2GRAY)
            new_image = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            # compare the images
            compare_images(original, new_image, "image in database vs. new_image")
            #cv2.imwrite("frame-" + time.strftime("%d-%m-%Y-%H-%M-%S") + ".jpg", cv2.cvtColor(frame, cv2.COLOR_RGB2BGR))

    def update(self):
        # Get a frame from the video source
        ret, frame = self.vid.get_frame()

        if ret:
            self.photo = PIL.ImageTk.PhotoImage(image = PIL.Image.fromarray(frame))
            self.canvas.create_image(0, 0, image = self.photo, anchor = tkinter.NW)

        self.window.after(self.delay, self.update)

class MyVideoCapture:
    def __init__(self, video_source=0):
        # Open the video source
        self.vid = cv2.VideoCapture(video_source)
        if not self.vid.isOpened():
            raise ValueError("Unable to open video source", video_source)

        # Get video source width and height
        self.width = self.vid.get(cv2.CAP_PROP_FRAME_WIDTH)
        self.height = self.vid.get(cv2.CAP_PROP_FRAME_HEIGHT)

    def get_frame(self):
        if self.vid.isOpened():
            ret, frame = self.vid.read()
            if ret:
                # Return a boolean success flag and the current frame converted to BGR
                return (ret, cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
            else:
                return (ret, None)
        else:
            return (ret, None)

    # Release the video source when the object is destroyed
    def __del__(self):
        if self.vid.isOpened():
            self.vid.release()

# Create a window and pass it to the Application object
App(tkinter.Tk(), "Tkinter and OpenCV")

#Image processing based online attendance using gui

#TANISHQ SANDUJA
